EJERCICIOS

1. Ejercicio BM

FUNCIÓN BM (v : VECTOR(ENTERO), n : ENTERO) : ENTERO
	m := v[0]					->O(1), constante
	PARA i DESDE 1 HASTA n-1 HACER			->O(n), lineal
		SI v[i] > m ENTONCES			->O(1), constante
			m := v[i]			->O(1), constante
		FINSI
	FINPARA
	DEVOLVER m					->O(1), constante
FINFUNCIÓN


2. Ejercicio ConteoI

FUNCIÓN ConteoI (v : VECTOR(ENTERO), n : ENTERO) : ENTERO
	conteo := 0						->O(1), constante
	PARA i DESDE 0 HASTA n-2 HACER				->O(n), lineal
		PARA j DESDE i+1 HASTA n-1 HACER		->O(n-1), lineal(depende de i)
			SI v[i] = v[j] ENTONCES			->O(1), constante
				conteo := conteo + 1		->O(1), constante
			FINSI
		FINPARA
	FINPARA
	DEVOLVER conteo						->O(1), constante
FINFUNCIÓN


3.Dado un arreglo, encuentra el número más frecuente usando un diccionario.

	public static int moda(int[] v) {
		Map<Integer, Integer> frecuencia = new HashMap<>();	->O(1), constante
		int maxFrecuencia = 0;					->O(1), constante
		int moda = v[0];					->O(1), constante
		for (int num : v) {					->O(n), lineal
			int f = frecuencia.getOrDefault(num, 0) + 1;	->O(1), constante
			frecuencia.put(num, f);				->O(1), constante					
			if (f > maxFrecuencia) {			->O(1), constante
				maxFrecuencia = f;			->O(1), constante
				moda = num;				->O(1), constante
			}
		}
		return moda;						->O(1), constante
}


4. Dado un arreglo, encuentra el número más frecuente usando un diccionario

FUNCIÓN potenciaRapida(x : ENTERO, y : ENTERO) : ENTERO
	SI y = 0 ENTONCES							->O(1), constante
		DEVOLVER 1							->O(1), constante
	SINO SI y % 2 = 0 ENTONCES						->O(1), constante
		mitad := potenciaRapida(x, y / 2)				->O(log y), logaritmica(llamada recursiva y/2)
		DEVOLVER mitad * mitad						->O(1), constante
	SINO
		DEVOLVER x * potenciaRapida(x, y - 1)				>O(log y), logaritmica(llamada recursiva y-1)
	FINSI
FINFUNCIÓN

